#!/bin/bash

function setup_workspace(){
  mkdir -p $MNT_DIR $EXTRACT_DIR $CUSTOM_DIR $APT_DIR $ISO_DIR $TEMPLATE_DIR
}

function mount_chroot(){
  mount --bind /dev $CUSTOM_DIR/dev
  mount --bind /run $CUSTOM_DIR/run
  chroot $CUSTOM_DIR mount none -t proc /proc
  chroot $CUSTOM_DIR mount none -t sysfs /sys
  chroot $CUSTOM_DIR mount none -t devpts /dev/pts
}

function umount_chroot(){
  chroot $CUSTOM_DIR umount /proc
  chroot $CUSTOM_DIR umount /sys
  chroot $CUSTOM_DIR umount /dev/pts
  umount -l $CUSTOM_DIR/dev
  umount -l $CUSTOM_DIR/run
}

function run_chroot(){
  chroot $CUSTOM_DIR bash -c 'for script in plurios/*; do bash -x "$script"; done'
  chroot $CUSTOM_DIR bash -c 'rm -rf /plurios'
}

function mount_iso(){
  mount -o loop $ISO_FILE $MNT_DIR
}

function umount_iso(){
  umount $MNT_DIR
}

function mount_apt(){
  mount --bind $APT_DIR $CUSTOM_DIR/var/cache/apt/archives
}

function umount_apt(){
  umount $CUSTOM_DIR/var/cache/apt/archives
}

function copy_content_iso(){
  rsync -aAXH --numeric-ids "$MNT_DIR"/ $EXTRACT_DIR
}

function clean_custom_dir(){
  find $CUSTOM_DIR -mindepth 1 -delete || continue
}

function clean_image_dir(){
find $IMAGE_DIR -mindepth 1 -delete || continue

}

function check_compression(){
  if [ $COMPRESSION == "zstd" ]; then
    OPTS_COMPRESSION="$OPTS_ZSTD"
  elif [ $COMPRESSON == "xz" ]; then
    OPTS_COMPRESSION="$OPTS_XZ"
  fi
}

function extract(){
  # use: extract [DIR_DST] [PATH_FILE]
  unsquashfs -f -d "$@"
}

function extract_content_filesystem(){
  extract $CUSTOM_DIR "$EXTRACT_DIR/casper/minimal.squashfs"
}

function extract_content_filesystem_template(){
  extract $CUSTOM_DIR $TEMPLATE_DIR/filesystem.squashfs
}

function compress_content_filesystem(){
  mv $CUSTOM_DIR/image $SCRIPT_DIR/$WORKSPACE/
  mv $CUSTOM_DIR/filesystem.manifest $IMAGE_DIR/casper/
  rmdir $CUSTOM_DIR/{bin.usr-is-merged,lib.usr-is-merged,sbin.usr-is-merged}

 check_compression

 mksquashfs $CUSTOM_DIR $IMAGE_DIR/casper/filesystem.squashfs -comp $COMPRESSION $OPTS_COMPRESSION \
        -e "var/cache/apt/archives/*" \
        -e "root/*" \
        -e "root/.*" \
        -e "tmp/*" \
        -e "tmp/.*" \
        -e "swapfile"
}

function load_info_release(){
PLURIOS_RELEASE_FILE="$CUSTOM_DIR/etc/plurios-release"

if [ ! -f "$PLURIOS_RELEASE_FILE" ]; then
    echo "Error: $PLURIOS_RELEASE_FILE does not exist."
    exit 1
fi

ID_FILE="$(echo "${NAME_ISO^}";)" && ID_FILE="${ID_FILE:0:-2}$(echo "${ID_FILE: -2}" | tr '[:lower:]' '[:upper:]')"
RELEASE_FILE="$VERSION_ISO"
CODENAME_FILE="${VARIANT_ISO^}"
DESCRIPTION_FILE='"Metadistro Linux Boliviana"'

sed -i "s/^DISTRIB_ID=.*/DISTRIB_ID=${ID_FILE}/" "$PLURIOS_RELEASE_FILE"
sed -i "s/^DISTRIB_RELEASE=.*/DISTRIB_RELEASE=${RELEASE_FILE}/" "$PLURIOS_RELEASE_FILE"
sed -i "s/^DISTRIB_CODENAME=.*/DISTRIB_CODENAME=${CODENAME_FILE}/" "$PLURIOS_RELEASE_FILE"
sed -i "s/^DISTRIB_DESCRIPTION=.*/DISTRIB_DESCRIPTION=${DESCRIPTION_FILE}/" "$PLURIOS_RELEASE_FILE"

echo "GRUB_DISTRIBUTOR='${ID_FILE} ${CODENAME_FILE} ${RELEASE_FILE}'" > "$CUSTOM_DIR/etc/default/grub.d/osname.cfg"

# Enable os-prober
echo "GRUB_DISABLE_OS_PROBER=false" >> "$CUSTOM_DIR/etc/default/grub.d/osprober.cfg"
}

##check_load_iso(){
#  if ! [[ -n "$ISO_FILE" && -f "$ISO_FILE" && "${ISO_FILE##*.}" == "iso" ]]; then
#    echo "Error: Use an existing file and it is in ISO format"
#    echo "Use: bash $0 ubuntucinnamon-24.04.2-desktop-amd64.iso"
#    exit 1
#fi
#}

check_load_iso() {
  if [[ -n "$ISO_FILE" && -f "$ISO_FILE" && "${ISO_FILE##*.}" == "iso" ]]; then
    return 0
  elif declare -F "$ISO_FILE" > /dev/null; then
    return 0
  else
    echo "Error: Provide an existing ISO file or a valid function name."
    echo "Usage: bash $0 ubuntucinnamon-24.04.2-desktop-amd64.iso  OR  bash $0 <function_name>"
    exit 1
  fi
}

function copy_rsync(){
  rsync -a --chown=root:root --chmod=D755,F644 "$@"
}

function copy_core(){
  copy_rsync "$SCRIPT_DIR/$DIR_CONF_CORE/" "$CUSTOM_DIR/plurios"
}

function copy_plurios(){
  copy_rsync "$SCRIPT_DIR/$DIR_CONF_PLURIOS/$VARIANT_ISO/" "$CUSTOM_DIR/plurios"
}

function copy_finish(){
  copy_rsync "$SCRIPT_DIR/$DIR_CONF_PLURIOS/finish/" "$CUSTOM_DIR/plurios"
}

function copy_prepare(){
  copy_rsync "$SCRIPT_DIR/$DIR_CONF_PREPARE_ISO/" "$CUSTOM_DIR/plurios"
}

function save_template_squashfs(){
  check_compression
   mksquashfs $CUSTOM_DIR $TEMPLATE_DIR/filesystem.squashfs -comp $COMPRESSION $OPTS_COMPRESSION \
        -e "var/cache/apt/archives/*" \
        -e "root/*" \
        -e "root/.*" \
        -e "tmp/*" \
        -e "tmp/.*" \
        -e "swapfile"
}

function extract_squashfs_for_template(){
  extract $TEMPLATE_DIR $EXTRACT_DIR/casper/minimal.squashfs
}

function copy_directories_and_files(){
  rsync -a --chown=root:root --chmod=D755,F644 "$DIR_EDITIONS/$VARIANT_ISO/" "$CUSTOM_DIR/plurios"
  rsync -a --chown=root:root --chmod=D755,F644 "$SCRIPT_DIR/$DIR_ETC/." "$CUSTOM_DIR/etc/"
  rsync -a --chown=root:root "$SCRIPT_DIR/$DIR_CONF_IMAGE" "$CUSTOM_DIR/"
  rsync -a --chown=root:root --chmod=D755,F644 "$SCRIPT_DIR/$CONF_DOTFILES/." "$CUSTOM_DIR/etc/skel/"

  cat $SCRIPT_DIR/$DIR_WALLPAPER/$VARIANT_ISO.png > $CUSTOM_DIR/usr/share/backgrounds/ubuntucinnamon/noble/ubuntu_cinnamon_noble_numbat.jpg
}

function calculate_filesystem_size(){
  du -sx --block-size=1 $IMAGE_DIR/casper/filesystem.squashfs | cut -f1 > $IMAGE_DIR/casper/filesystem.size
}

function config_disk() {
  sed -i "s/DISC_LABEL_NAME/$DISC_LABEL_NAME/g" "$IMAGE_DIR/README.diskdefines"
  (
    cd "$IMAGE_DIR" || { echo "Error: no se puede acceder a $IMAGE_DIR"; return 1; }
    find . -type f -exec md5sum {} \; > md5sum.txt
    sed -i 's|^\./||' md5sum.txt
  )
}

function generate_iso(){
  pushd $IMAGE_DIR
xorriso \
    -as mkisofs \
    -iso-level 3 \
    -full-iso9660-filenames \
    -J -joliet-long \
    -volid "${NAME_ISO^^}" \
    -output "$ISO_DIR/$TARGET_NAME.iso" \
    -eltorito-boot isolinux/bios.img \
    -no-emul-boot \
    -boot-load-size 4 \
    -boot-info-table \
    --eltorito-catalog boot.catalog \
    --grub2-boot-info \
    --grub2-mbr $CUSTOM_DIR/usr/lib/grub/i386-pc/boot_hybrid.img \
    -partition_offset 16 \
    --mbr-force-bootable \
    -eltorito-alt-boot \
        -no-emul-boot \
        -e isolinux/efiboot.img \
        -graft-points \
            "/EFI/boot/bootx64.efi=isolinux/bootx64.efi" \
            "/EFI/boot/mmx64.efi=isolinux/mmx64.efi" \
            "/EFI/boot/grubx64.efi=isolinux/grubx64.efi" \
            "/EFI/ubuntu/grub.cfg=isolinux/grub.cfg" \
            "/isolinux/bios.img=isolinux/bios.img" \
            "/isolinux/efiboot.img=isolinux/efiboot.img" \
            "$IMAGE_DIR"
    popd

   md5sum "$ISO_DIR/$TARGET_NAME.iso" > "$ISO_DIR/$TARGET_NAME.iso.md5"
}

# ======= functions ======

function get_content_iso(){
  setup_workspace
  mount_iso
  copy_content_iso
  umount_iso
}

function create_template_squashfs(){
  extract_content_filesystem
  mount_chroot
  copy_core
  run_chroot
  umount_chroot
  save_template_squashfs
  clean_custom_dir
}

function load_filesystem(){
  clean_custom_dir
  clean_image_dir
  extract_content_filesystem_template
  mount_chroot
  mount_apt
  copy_directories_and_files
  load_info_release
}

function exec_chroot(){
  for RUN in copy_plurios copy_finish copy_prepare; do
    $RUN
    run_chroot
  done
}

function repack_filesystem(){
  umount_apt
  umount_chroot
  compress_content_filesystem
  calculate_filesystem_size
}

function build_iso(){
  config_disk
  generate_iso
}
